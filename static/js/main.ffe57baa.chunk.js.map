{"version":3,"sources":["components/CityForm.js","WeatherApi.js","components/WeatherParam.js","components/Loader.js","components/City.js","actions/cityActions.js","components/Cities.js","actions/geoActions.js","components/Geolocation.js","App.js","serviceWorker.js","localStorage.js","reducers/cityReducer.js","store.js","reducers/geoReducer.js","index.js"],"names":["CityForm","props","class","onSubmit","e","type","name","placeholder","required","value","API_BASE_URL","API_BASE_PARAMETERS","API_ICON_URL","extractWeatherParams","apiResponse","coords","coord","weather","icon","description","main","temperature","temp","pressure","humidity","windSpeed","wind","speed","cityName","WeatherParam","className","Loader","City","forecast","this","onFetch","console","log","renderWeather","renderLoader","iconCode","latitude","lat","longitude","lon","onDelete","src","alt","onClick","React","Component","Actions","ADD_СITY","DELETE_СITY","FETCH_CITY_SUCCESS","FETCH_CITY_ERROR","fetchWeatherByCityName","API_URL","dispatch","fetch","then","response","json","ok","payload","fetchCitySuccess","fetchCityError","message","error","Сities","handleCityForm","cities","entries","map","entry","key","deleteСity","preventDefault","currentTarget","elements","addСity","connect","state","SET_GEOLOCATION","FETCH_GEO_SUCCESS","FETCH_GEO_ERROR","fetchWeatherByCoords","fetchGeoError","Geolocation","getGeolocation","handleClick","navigator","geolocation","getCurrentPosition","position","setGeolocation","geo","App","Boolean","window","location","hostname","match","LOCAL_STORAGE_KEY","initialState","localStorageContent","JSON","parse","localStorage","getItem","Array","isArray","Map","undefined","getCitiesFromStorage","store","createStore","combineReducers","action","has","set","delete","applyMiddleware","logger","thunk","subscribe","setItem","stringify","getState","keys","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ffe57baa.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./styles/CityForm.css\";\r\n\r\nexport default function CityForm(props) {\r\n  return (\r\n    <form class=\"add-city\" onSubmit={(e) => props.onSubmit(e)}>\r\n      <input class=\"input\" type=\"text\" name=\"cityName\" placeholder=\"City name\" required={true} />\r\n      <input class=\"button\" type=\"submit\" value=\"Add to city\"/>\r\n    </form>\r\n  );\r\n}","export const API_BASE_URL = \"https://api.openweathermap.org/data/2.5/weather\";\r\nexport const API_BASE_PARAMETERS = \"&appid=7825ce4ffa896c5019e53087c858568a&units=metric&lang=en\"\r\nconst API_ICON_URL = \"https://openweathermap.org/img/wn/\";\r\n\r\nexport function getIconURL(iconCode) {\r\n  return `${API_ICON_URL}${iconCode}.png`;\r\n}\r\n\r\nexport function extractWeatherParams(apiResponse) {\r\n  const {\r\n    coord: coords,\r\n    weather: [{ icon, description }],\r\n    main: {\r\n      temp: temperature,\r\n      pressure,\r\n      humidity\r\n    },\r\n    wind: {\r\n      speed: windSpeed\r\n    },\r\n    name: cityName\r\n  } = apiResponse;\r\n\r\n  return {\r\n    cityName,\r\n    temperature,\r\n    pressure,\r\n    humidity,\r\n    windSpeed,\r\n    icon,\r\n    description,\r\n    coords\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./styles/WeatherParam.css\";\r\n\r\n\r\nexport default function WeatherParam(props) {\r\n  return (\r\n    <div className=\"param\">\r\n      <div className=\"name\">{props.name}</div>\r\n      <div className=\"value\">{props.value}</div>\r\n    </div>\r\n  );\r\n}","import React from \"react\";\r\nimport \"./styles/Loader.css\";\r\n\r\n\r\nexport default function Loader() {\r\n  return (\r\n    <div className=\"loader\">\r\n      <p>Forecast is loading...</p>\r\n    </div>\r\n  );\r\n}","import React from \"react\";\r\nimport { getIconURL } from \"../WeatherApi\"\r\n\r\nimport WeatherParam from \"./WeatherParam\";\r\n\r\nimport Loader from \"./Loader\";\r\nimport \"./styles/City.css\";\r\n\r\n\r\n\r\n\r\nexport default class City extends React.Component {\r\n  componentDidMount() {\r\n    let forecast = this.props.onFetch();\r\n    console.log(\"tyt\")\r\n    console.log(forecast)\r\n  }\r\n\r\n  render() {\r\n    if (!this.props.forecast) {\r\n      return this.renderLoader();\r\n    }\r\n\r\n    return this.renderWeather();\r\n  }\r\n\r\n  renderLoader() {\r\n    return <Loader />\r\n  }\r\n\r\n  renderWeather() {\r\n    const {\r\n      forecast: {\r\n        cityName,\r\n        temperature,\r\n        icon,\r\n        windSpeed,\r\n        description,\r\n        pressure,\r\n        humidity,\r\n        coords: {\r\n          lat: latitude,\r\n          lon: longitude\r\n        } = {}\r\n      },\r\n      onDelete\r\n    } = this.props;\r\n\r\n    return (\r\n      <div className=\"city\">\r\n        <div className=\"header\">\r\n          <div className=\"city-name\">{cityName}</div>\r\n          <div className=\"temperature\">{temperature} &#8451;</div>\r\n          <img src={getIconURL(icon)} alt=\"Weather icon\" />\r\n        </div>\r\n\r\n        <WeatherParam name=\"Wind\" value={`${windSpeed} m/s`} />\r\n        <WeatherParam name=\"Cloudness\" value={description} />\r\n        <WeatherParam name=\"Pressure\" value={`${pressure} hPa`} />\r\n        <WeatherParam name=\"Humidity\" value={`${humidity}%`} />\r\n        <WeatherParam name=\"Coords\" value={`${latitude}, ${longitude}`} />\r\n\r\n        {onDelete && <button className=\"button\" onClick={onDelete}>delete</button>}\r\n      </div>\r\n    );\r\n  }\r\n}","import { API_BASE_URL, API_BASE_PARAMETERS } from \"../WeatherApi\"\r\n\r\n\r\nexport const Actions = {\r\n  ADD_СITY: \"ADD_СITY\",\r\n  DELETE_СITY: \"DELETE_СITY\",\r\n  FETCH_CITY_SUCCESS: \"FETCH_CITY_SUCCESS\",\r\n  FETCH_CITY_ERROR: \"FETCH_CITY_ERROR\"\r\n}\r\n\r\nexport function addСity(cityName) {\r\n  return {\r\n    type: Actions.ADD_СITY,\r\n    payload: cityName\r\n  };\r\n}\r\n\r\nexport function deleteСity(cityName) {\r\n  return {\r\n    type: Actions.DELETE_СITY,\r\n    payload: cityName\r\n  };\r\n}\r\n\r\nexport function fetchWeatherByCityName(cityName) {\r\n  const API_URL = `${API_BASE_URL}?q=${cityName}${API_BASE_PARAMETERS}`;\r\n\r\n  return function (dispatch) {\r\n    fetch(API_URL)\r\n      .then(response => {\r\n        response.json()\r\n          .then(json => {\r\n            console.log(response, json);\r\n            if (!response.ok) {\r\n              dispatch(fetchCityError(json.message, cityName));\r\n            } else {\r\n              dispatch(fetchCitySuccess(json, cityName));\r\n            }\r\n          });\r\n      },\r\n        error => dispatch(fetchCityError(error, cityName)))\r\n  }\r\n}\r\n\r\nfunction fetchCitySuccess(apiResponse, cityName) {\r\n  return {\r\n    type: Actions.FETCH_CITY_SUCCESS,\r\n    payload: {\r\n      apiResponse,\r\n      cityName\r\n    }\r\n  }\r\n}\r\n\r\nfunction fetchCityError(error, cityName) {\r\n  return {\r\n    type: Actions.FETCH_CITY_ERROR,\r\n    payload: {\r\n      error,\r\n      cityName\r\n    }\r\n  }\r\n}","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport CityForm from \"./CityForm\"\r\nimport City from \"./City\";\r\nimport { addСity, deleteСity, fetchWeatherByCityName } from \"../actions/cityActions\";\r\nimport \"./styles/Cities.css\";\r\n\r\n\r\n\r\nclass Сities extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"cities\">\r\n        <h1>Сities</h1>\r\n        <CityForm onSubmit={(e) => this.handleCityForm(e)} />\r\n        {this.props.error && <div className=\"error\">Error: {this.props.error}</div>}\r\n        <div className=\"forecasts\">\r\n          {\r\n            [...this.props.cities.entries()].map((entry) => {\r\n              console.log(entry[0])\r\n              return (\r\n                <City\r\n                  key={entry[0]}\r\n                  onFetch={() => this.props.fetchWeatherByCityName(entry[0])}\r\n                  onDelete={() => this.props.deleteСity(entry[0])}\r\n                  forecast={entry[1]} />\r\n              );\r\n            })\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  handleCityForm(e) {\r\n    e.preventDefault();\r\n    const cityName = e.currentTarget.elements.cityName.value;\r\n    this.props.addСity(cityName);\r\n  }\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    cities: state.cities.cities,\r\n    error: state.cities.error\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    addСity: (cityName) => {\r\n      dispatch(addСity(cityName));\r\n    },\r\n\r\n    deleteСity: (cityName) => {\r\n      dispatch(deleteСity(cityName)); \r\n    },\r\n\r\n    fetchWeatherByCityName: (cityName) => {\r\n      dispatch(fetchWeatherByCityName(cityName));\r\n    }\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Сities);","import { API_BASE_URL, API_BASE_PARAMETERS } from \"../WeatherApi\";\r\n\r\nexport const Actions = {\r\n  SET_GEOLOCATION: \"SET_GEOLOCATION\",\r\n  FETCH_GEO_SUCCESS: \"FETCH_GEO_SUCCESS\",\r\n  FETCH_GEO_ERROR: \"FETCH_GEO_ERROR\",\r\n}\r\n\r\nexport function setGeolocation(coords) {\r\n  return {\r\n    type: Actions.SET_GEOLOCATION,\r\n    payload: coords\r\n  }\r\n}\r\n\r\nexport function fetchWeatherByCoords(coords) {\r\n  const API_URL = `${API_BASE_URL}?lat=${coords.lat}&lon=${coords.lon}${API_BASE_PARAMETERS}`;\r\n\r\n  return function(dispatch) {\r\n    fetch(API_URL)\r\n      .then(response => {\r\n        response.json()\r\n          .then(json => {\r\n            console.log(response, json);\r\n            if (!response.ok) {\r\n              dispatch(fetchGeoError(json.message));\r\n            } else {\r\n              dispatch(fetchGeoSuccess(json));\r\n            }\r\n          });\r\n      },\r\n      error => dispatch(fetchGeoError(error)))\r\n  }\r\n}\r\n\r\nfunction fetchGeoSuccess(apiResponse) {\r\n  return {\r\n    type: Actions.FETCH_GEO_SUCCESS,\r\n    payload: apiResponse\r\n  }\r\n}\r\n\r\nexport function fetchGeoError(error) {\r\n  return {\r\n    type: Actions.FETCH_GEO_ERROR,\r\n    payload: error\r\n  }\r\n}","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { setGeolocation, fetchWeatherByCoords, fetchGeoError } from \"../actions/geoActions\";\r\nimport City from \"./City\";\r\n\r\nimport \"./styles/Geolocation.css\";\r\n\r\n\r\nclass Geolocation extends React.Component {\r\n  componentDidMount() {\r\n    this.getGeolocation();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"geolocation\">\r\n        <h1 className=\"header\">Refresh geolocation</h1>\r\n        <button className=\"button\"\r\n          onClick={() => this.handleClick()}\r\n        >Get geolocation</button>\r\n        {!this.props.error ? this.props.coords && (\r\n          <City\r\n            onFetch={() => this.props.fetchWeatherByCoords(this.props.coords)}\r\n            forecast={this.props.forecast}/>\r\n        ) : (\r\n          <div className=\"error\">Error: {this.props.error}</div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  handleClick() {\r\n    this.getGeolocation();\r\n  }\r\n\r\n  getGeolocation() {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(position => {\r\n        const coords = {\r\n          lat: position.coords.latitude,\r\n          lon: position.coords.longitude\r\n        };\r\n        this.props.setGeolocation(coords);\r\n        this.props.fetchWeatherByCoords(this.props.coords);\r\n      },\r\n      () => {\r\n        this.props.setGeolocation({lat: 46.47, lon: 41.53});\r\n        this.props.fetchWeatherByCoords(this.props.coords);\r\n      });\r\n    } else {\r\n      this.props.fetchGeoError(\"your browser does not support geolocation\");\r\n    } \r\n  }\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    coords: state.geo.coords,\r\n    forecast: state.geo.forecast,\r\n    error: state.geo.error\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    setGeolocation: (coords) => {\r\n      dispatch(setGeolocation(coords));\r\n    },\r\n\r\n    fetchWeatherByCoords: (coords) => {\r\n      dispatch(fetchWeatherByCoords(coords));\r\n    },\r\n\r\n    fetchGeoError: (error) => {\r\n      dispatch(fetchGeoError(error));\r\n    }\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Geolocation);","import React from \"react\";\r\nimport Cities from \"./components/Cities\";\r\nimport Geolocation from \"./components/Geolocation\"\r\nimport \"./App.css\"\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Geolocation />\r\n        <Cities />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const LOCAL_STORAGE_KEY = \"cities\";\r\n\r\n\r\nexport function getCitiesFromStorage(key = LOCAL_STORAGE_KEY) {\r\n    const localStorageContent = JSON.parse(localStorage.getItem(key));\r\n    let cities = [];\r\n    if (localStorageContent !== null && Array.isArray(localStorageContent))\r\n    cities = localStorageContent;\r\n    return new Map(cities.map(cityName => [cityName, undefined]));\r\n  }","import { Actions } from \"../actions/cityActions\";\r\n\r\nimport { getCitiesFromStorage } from \"../localStorage\";\r\nimport { extractWeatherParams } from \"../WeatherApi\";\r\n\r\nconst initialState = {\r\n  cities: getCitiesFromStorage()\r\n};\r\n\r\nexport default function Reducer(state = initialState, action) {\r\n  state = {\r\n    ...state,\r\n    error: false,\r\n    cities: new Map(state.cities)\r\n  };\r\n\r\n  switch (action.type) {\r\n    case Actions.ADD_СITY:\r\n      if (!state.cities.has(action.payload))\r\n        state.cities.set(action.payload);\r\n      break;\r\n\r\n    case Actions.DELETE_СITY:\r\n      state.cities.delete(action.payload);\r\n      break;\r\n\r\n    case Actions.FETCH_CITY_SUCCESS:\r\n      console.log(action.payload.apiResponse)\r\n      const forecast = extractWeatherParams(action.payload.apiResponse);\r\n      state.cities.delete(action.payload.cityName);\r\n      state.cities.set(forecast.cityName, forecast);\r\n      break;\r\n\r\n    case Actions.FETCH_CITY_ERROR:\r\n      state.error = action.payload.error;\r\n      state.cities.delete(action.payload.cityName);\r\n      break;\r\n\r\n    default:\r\n      break;\r\n  }\r\n\r\n  return state;\r\n}","import { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport logger from \"redux-logger\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport cityReducer from \"./reducers/cityReducer\";\r\nimport geoReducer from \"./reducers/geoReducer\"\r\nimport { LOCAL_STORAGE_KEY } from \"./localStorage\";\r\n\r\n\r\nconst store = createStore(\r\n  combineReducers({cities: cityReducer, geo: geoReducer}),\r\n  applyMiddleware(logger, thunk)\r\n);\r\n\r\nstore.subscribe(() => {\r\n  localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify([...store.getState().cities.cities.keys()]));\r\n});\r\n\r\nexport default store;","import { Actions } from \"../actions/geoActions\";\r\nimport { extractWeatherParams } from \"../WeatherApi\";\r\n\r\n\r\nexport default function geoReducer(state, action) {\r\n  state = {\r\n    ...state,\r\n    error: false\r\n  };\r\n\r\n  switch (action.type) {\r\n    case Actions.SET_GEOLOCATION:\r\n      state.coords = action.payload;\r\n      break;\r\n    \r\n    case Actions.FETCH_GEO_SUCCESS:\r\n      state.forecast = extractWeatherParams(action.payload);\r\n      break;\r\n\r\n    case Actions.FETCH_GEO_ERROR:\r\n      state.error = action.payload;\r\n      break;\r\n\r\n    default:\r\n      break;\r\n  }\r\n\r\n  return state;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\n\nReactDOM.render(\n    <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}